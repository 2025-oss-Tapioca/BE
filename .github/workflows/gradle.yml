# .github/workflows/cicd.yml
name: "CI/CD using github actions & docker"

on:
  push:
    branches: [ "Dev" ]
  pull_request:
    branches: [ "Dev" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Grant execute permission to Gradle Wrapper
        run: chmod +x ./gradlew

      # ✅ 테스트 포함 빌드 (application.yml 없이 환경변수로 DB/JWT 주입)
      - name: Build (tests use RDS & JWT)
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_NAME }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.DB_USER }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.DB_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: ./gradlew clean build --stacktrace --info

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/docker-test:${{ github.sha }}
          docker build -t $IMAGE .
          docker push $IMAGE

      - name: Deploy to EC2 (pull & run)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          port: ${{ secrets.PORT }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            set -e
            IMAGE="${{ secrets.DOCKER_USERNAME }}/docker-test:${{ github.sha }}"
            sudo docker pull "$IMAGE"
            sudo docker stop web || true
            sudo docker rm web || true
            sudo docker run -d --name web \
              -p 8080:8080 \
              --restart unless-stopped \
              -e SPRING_DATASOURCE_URL='jdbc:postgresql://${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_NAME }}' \
              -e SPRING_DATASOURCE_USERNAME='${{ secrets.DB_USER }}' \
              -e SPRING_DATASOURCE_PASSWORD='${{ secrets.DB_PASSWORD }}' \
              -e JWT_SECRET='${{ secrets.JWT_SECRET }}' \
              "$IMAGE"
            sudo docker image prune -a -f
