# CI/CD 파이프라인을 위한 GitHub Actions 워크플로우
name: "CI/CD using github actions & docker"

# main 브랜치에 push나 PR 발생 시 워크플로우 실행
on:
  push:
    branches: [ "main" ]           # main 브랜치에 푸시될 때
  pull_request:
    branches: [ "main" ]           # main 브랜치로 PR 생성될 때

jobs:
  build:
    runs-on: ubuntu-latest         # 우분투 호스트에서 실행
    permissions:
      contents: read               # 코드 읽기 권한만 부여

    steps:
    - uses: actions/checkout@v4    # 리포지토리 코드 체크아웃

    - name: Set up JDK 17
      uses: actions/setup-java@v4  # 자바 17 설치
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3.1.0  # Gradle 환경 설정 및 캐시 활성화
      with:
        cache: true  # 의존성 캐싱 사용
        cache-key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*','**/gradle-wrapper.properties') }}  # 캐시 키
        cache-path: ~/.gradle/caches  # 캐시 저장 경로

    - name: Build with Gradle Wrapper
      run: ./gradlew build        # 프로젝트 빌드 및 테스트 수행

    - name: Log in to Docker Hub
      uses: docker/login-action@v2  # Docker Hub 로그인
      with:
        username: ${{ secrets.DOCKER_USERNAME }}  # Docker Hub 사용자명
        password: ${{ secrets.DOCKER_PASSWORD }}  # Docker Hub 토큰 또는 비밀번호

    - name: Build and push Docker image
      run: |
        IMAGE=${{ secrets.DOCKER_USERNAME }}/docker-test:${{ github.sha }}  # 이미지명에 커밋 SHA 태그 추가
        docker build -t $IMAGE .       # 이미지 빌드
        docker push $IMAGE             # 레지스트리에 푸시

    - name: Docker image pull & Deploy to EC2
      uses: appleboy/ssh-action@master  # SSH 액션으로 원격 배포
      with:
        host: ${{ secrets.HOST }}           # EC2 퍼블릭 호스트명
        port: ${{ secrets.PORT }}           # SSH 포트 (기본 22)
        username: ubuntu                    # EC2 사용자명 (Ubuntu 기본)
        key: ${{ secrets.PRIVATE_KEY }}     # SSH 비밀키
        script: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/docker-test:${{ github.sha }}  # 동일 이미지 태그 사용
          sudo docker pull $IMAGE           # 최신 이미지 가져오기
          sudo docker stop web || true      # 기존 컨테이너 중지
          sudo docker rm web || true        # 중지된 컨테이너 삭제
          sudo docker run -d --name web -p 8080:8080 $IMAGE  # 새 컨테이너 기동
          sudo docker image prune -a -f     # 사용하지 않는 이미지 정리

