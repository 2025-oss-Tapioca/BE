# .github/workflows/deploy.yml
name: "🚀 Spring Boot Docker CI/CD"

on:
  push:
    branches: [ "Dev" ]  # main 브랜치에 푸시될 때마다 실행

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/spring-app

    steps:
      # 1) 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # 2) JDK 17 설치 (Gradle 빌드용)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3) application.yml 생성 (시크릿 원문 → 그대로 저장)
      - name: Create application.yml from Secrets
        run: |
          mkdir -p ./src/main/resources
          cat > ./src/main/resources/application.yml <<'YAML'
${{ secrets.APPLICATION_YML }}
YAML

      # 4) Gradle 실행 권한 + 빌드 (테스트 제외)
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      # 5) Docker Hub 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 6) Docker 이미지 빌드 및 태그
      - name: Build Docker image
        run: |
          IMAGE_TAG="${IMAGE_NAME}:${{ github.sha }}"
          docker build -t "$IMAGE_TAG" .
          docker tag "$IMAGE_TAG" "$IMAGE_NAME:latest"

      # 7) Docker 이미지 푸시 (SHA 태그 + latest 태그)
      - name: Push Docker images
        run: |
          IMAGE_TAG="${IMAGE_NAME}:${{ github.sha }}"
          docker push "$IMAGE_TAG"
          docker push "$IMAGE_NAME:latest"

      # 8) .env 파일 생성 (TAG 정보 저장)
      - name: Create env.dev with TAG
        run: echo "TAG=${{ github.sha }}" > env.dev

      # 9) env.dev 파일을 원격 서버로 복사
      - name: Send env.dev to remote
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DEPLOY_SERVER_IP }}
          username: ${{ secrets.DEPLOY_SERVER_USER }}
          key: ${{ secrets.DEPLOY_SERVER_KEY }}
          source: |
            env.dev
          target: ${{ secrets.DEPLOY_DIRECTORY }}

      # 10) 원격 서버에 접속하여 docker compose로 배포
      - name: Remote deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_SERVER_IP }}
          username: ${{ secrets.DEPLOY_SERVER_USER }}
          key: ${{ secrets.DEPLOY_SERVER_KEY }}
          script: |
            set -e
            cd "${{ secrets.DEPLOY_DIRECTORY }}"
            docker compose pull          # 최신 spring-app 이미지 받기 (compose 파일이 ${TAG}를 참고해야 함)
            docker compose up -d         # 컨테이너 재시작/갱신
            docker image prune -f        # 안 쓰는 이미지 정리(선택)
