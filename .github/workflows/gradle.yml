# .github/workflows/cicd.yml
name: CI/CD using GitHub Actions & Docker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle  # Gradle 캐시

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Grant execute permission to Gradle Wrapper
        run: chmod +x ./gradlew

      # ✅ 테스트 스킵하고 부트 JAR만 생성
      - name: Build (skip tests)
        run: ./gradlew clean bootJar -x test

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push Docker image
        env:
          IMAGE: ${{ secrets.DOCKER_USERNAME }}/docker-test
        run: |
          GIT_SHA=${GITHUB_SHA}
          docker build -t $IMAGE:$GIT_SHA -t $IMAGE:latest .
          docker push $IMAGE:$GIT_SHA
          docker push $IMAGE:latest

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          port: ${{ secrets.PORT }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            set -e
            IMAGE="${{ secrets.DOCKER_USERNAME }}/docker-test:${{ github.sha }}"

            # 최신 이미지 pull
            sudo docker pull $IMAGE

            # 기존 컨테이너 종료/삭제
            sudo docker stop web || true
            sudo docker rm web || true

            # 새 컨테이너 기동 (RDS 환경변수만 주입; 프로필 변수 없음)
            sudo docker run -d --name web \
              -p 8080:8080 \
              --restart unless-stopped \
              -e DB_HOST='${{ secrets.DB_HOST }}' \
              -e DB_PORT='${{ secrets.DB_PORT }}' \
              -e DB_NAME='${{ secrets.DB_NAME }}' \
              -e DB_USER='${{ secrets.DB_USER }}' \
              -e DB_PASSWORD='${{ secrets.DB_PASSWORD }}' \
              $IMAGE

            # 미사용 이미지 정리
            sudo docker image prune -a -f
