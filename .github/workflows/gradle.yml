# .github/workflows/deploy.yml
name: "🚀 Spring Boot Docker CI/CD (no compose)"

on:
  push:
    branches: [ "main" ]  # 필요하면 "Dev" 등으로 바꿔

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/docker-test

    steps:
      # 1) 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # 2) JDK 17 설치 (Gradle 빌드용)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      # 3) (선택) 시크릿에 넣어둔 application.yml 원문으로 파일 생성
      #    - GitHub Secrets에 APPLICATION_YML 에 멀티라인 그대로 저장해둔 경우만 사용
      - name: Create application.yml from Secrets
        if: ${{ secrets.APPLICATION_YML != '' }}
        env:
          APPLICATION_YML: ${{ secrets.APPLICATION_YML }}
        run: |
          mkdir -p ./src/main/resources
          printf '%s' "$APPLICATION_YML" > ./src/main/resources/application.yml

      # 4) Gradle 권한 + 빌드 (테스트 제외: DB 미연결 CI 환경 안전)
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle (skip tests)
        run: ./gradlew clean build -x test

      # 5) Docker Hub 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 6) Docker 이미지 빌드 및 푸시 (SHA 태그)
      - name: Build and push Docker image
        run: |
          IMAGE_TAG="${IMAGE_NAME}:${{ github.sha }}"
          docker build -t "$IMAGE_TAG" .
          docker push "$IMAGE_TAG"

      # 7) EC2에 접속해 기존 컨테이너 교체(run 방식, compose 사용 안 함)
      - name: Remote deploy to server (no compose)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          port: ${{ secrets.PORT }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            set -e
            IMAGE="${{ secrets.DOCKER_USERNAME }}/docker-test:${{ github.sha }}"
            sudo docker pull "$IMAGE"
            sudo docker stop web || true
            sudo docker rm web || true
            # 필요 시 -e 로 환경변수 주입 추가
            sudo docker run -d --name web \
              -p 8080:8080 \
              --restart unless-stopped \
              "$IMAGE"
            sudo docker image prune -f
