# .github/workflows/deploy.yml
name: "🚀 Spring Boot Docker CI/CD"

on:
  push:
    branches: [ "main" ]   # ← Dev 쓰면 "Dev"로 바꿔

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/docker-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # application.yml을 시크릿 원문으로부터 생성
      - name: Create application.yml from Secrets
        env:
          APPLICATION_YML: ${{ secrets.APPLICATION_YML }}   # ← 시크릿에 YAML 원문 그대로
        run: |
          mkdir -p ./src/main/resources
          printf '%s' "$APPLICATION_YML" > ./src/main/resources/application.yml

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 테스트 제외(CI에서 DB 미연결 시 안정)
      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          IMAGE_TAG="${IMAGE_NAME}:${{ github.sha }}"
          docker build -t "$IMAGE_TAG" .
          docker tag "$IMAGE_TAG" "$IMAGE_NAME:latest"

      - name: Push Docker images
        run: |
          IMAGE_TAG="${IMAGE_NAME}:${{ github.sha }}"
          docker push "$IMAGE_TAG"
          docker push "$IMAGE_NAME:latest"

      - name: Create env.dev with TAG
        run: echo "TAG=${{ github.sha }}" > env.dev

      # 원격 폴더 보장(권한/존재 이슈 예방)
      - name: Ensure deploy dir exists
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          port: ${{ secrets.PORT }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            set -e
            mkdir -p "${{ secrets.DEPLOY_DIRECTORY }}"
            ls -ld "${{ secrets.DEPLOY_DIRECTORY }}"

      # env.dev 업로드 (port 지정 + 디버그)
      - name: Upload env.dev
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          port: ${{ secrets.PORT }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          source: env.dev
          target: "${{ secrets.DEPLOY_DIRECTORY }}/"
          overwrite: true
          debug: true

      - name: Remote deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          port: ${{ secrets.PORT }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            set -e
            cd "${{ secrets.DEPLOY_DIRECTORY }}"
            docker compose pull
            docker compose up -d
            docker image prune -f
