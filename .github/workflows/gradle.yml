# .github/workflows/deploy.yml
name: "🚀 Spring Boot Docker CI/CD (no compose)"

on:
  push:
    branches: [ "main", "Dev" ]  # 필요 없으면 한 가지만 남겨도 됨

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/docker-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      # 시크릿에 APPLICATION_YML(원문) 넣은 경우에만 파일 생성
      - name: Create application.yml from Secrets (optional)
        env:
          APPLICATION_YML: ${{ secrets.APPLICATION_YML }}
        run: |
          mkdir -p ./src/main/resources
          if [ -n "$APPLICATION_YML" ]; then
            printf '%s' "$APPLICATION_YML" > ./src/main/resources/application.yml
            echo "application.yml created from secret."
          else
            echo "APPLICATION_YML is empty. Skipping."
          fi

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle (skip tests)
        run: ./gradlew clean build -x test

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          IMAGE_TAG="${IMAGE_NAME}:${{ github.sha }}"
          docker build -t "$IMAGE_TAG" .
          docker push "$IMAGE_TAG"

      - name: Remote deploy to EC2 (no compose)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          port: ${{ secrets.PORT }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            set -e
            IMAGE="${{ secrets.DOCKER_USERNAME }}/docker-test:${{ github.sha }}"
            sudo docker pull "$IMAGE"
            sudo docker stop web || true
            sudo docker rm web || true
            sudo docker run -d --name web \
              -p 8080:8080 \
              --restart unless-stopped \
              "$IMAGE"
            sudo docker image prune -f
