# .github/workflows/cicd.yml
name: "CI/CD using github actions & docker"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle   # setup-java가 Gradle 캐시 관리

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3

    - name: Grant execute permission to Gradle Wrapper
      run: chmod +x ./gradlew

    # ✅ 테스트 스킵하고 부트 JAR만 생성
    - name: Build (skip tests)
      run: ./gradlew clean bootJar -x test

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      run: |
        IMAGE=${{ secrets.DOCKER_USERNAME }}/docker-test:${{ github.sha }}
        docker build -t $IMAGE .
        docker push $IMAGE

    - name: Docker image pull & Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        port: ${{ secrets.PORT }}
        username: ubuntu
        key: ${{ secrets.PRIVATE_KEY }}
        script: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/docker-test:${{ github.sha }}
          sudo docker pull $IMAGE
          sudo docker stop web || true
          sudo docker rm web || true

          # ✅ RDS 접속 정보 주입해서 컨테이너 실행
          sudo docker run -d --name web \
            -p 8080:8080 \
            --restart unless-stopped \
            -e DB_HOST='${{ secrets.DB_HOST }}' \
            -e DB_PORT='${{ secrets.DB_PORT }}' \
            -e DB_NAME='${{ secrets.DB_NAME }}' \
            -e DB_USER='${{ secrets.DB_USER }}' \
            -e DB_PASSWORD='${{ secrets.DB_PASSWORD }}' \
            $IMAGE

          sudo docker image prune -a -f
